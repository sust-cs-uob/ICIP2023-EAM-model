variant: 2

Processes:
  - name: Origin Datacentre

#    metadata:
#      - description: |
#          energy_meta = analytics, recommendation
#
#          general formula:
#                  energy_encoding = sum { i in (titles x codecs x resolutions x quality points) } encoding_energy_i
#                  energy_Tx = datavolume_served_origin * energy_intensity_Tx
#                  energy_storage = datavolume_origin * energy_intensity_storage
#                  energy = energy_encoding + energy_storage + energy_Tx + energy_meta
#                  energy_encoding = sum { i in (titles x codecs x resolutions x quality points) } encoding_energy_i
#                  $$
#                    E^{ODC} = E_{encoding}^{ODC} + E_{storage}^{ODC} + E_{Tx}^{ODC} + E_{meta}^{ODC}
#                  $$
    formula: |      
      energy_serving = datavolume_Rx_CDN * I_Tx;      
      energy = energy_serving;
    tableVariables:
      - value: I_Tx
    importVariables:
      - value: datavolume_Rx_CDN
    link_to: [ ]

  - name: Content Delivery Network
    # https://openconnect.netflix.com/en_gb/appliances/
#    assume mix of OC servers, calculate Tx intensity, scale with bandwidth, neglect storage energy

#      energy_CDN_storage = datavolume_Rx_CDN * I_storage;
    formula: |            
      datavolume_Rx_CDN = cachemiss_rate * datavolume_Tx_CDN;  
      energy_CDN_Rx = datavolume_Rx_CDN * I_Tx;
      energy_CDN_Tx = datavolume_Tx_CDN * I_Tx;
          
      energy = energy_CDN_Rx + energy_CDN_Tx;
    tableVariables:
      - value: cachemiss_rate
      - value: I_Tx
#      - value: I_storage
    importVariables:
      - value: datavolume_Tx_CDN
    exportVariables:
      - value: datavolume_Rx_CDN
    link_to:
      - Origin Datacentre

  - name: Core Network

    formula:
        energy = I_Core * datavolume_Tx_CDN;

    tableVariables:
      - value: I_Core
#      - value: P_Core_per_sub

    importVariables:
      - value: datavolume_Tx_CDN
      - value: viewing_time
    exportVariables:
      - value: datavolume_Tx_CDN
      - value: viewing_time

    link_to:
      - Content Delivery Network

  - name: Access Network
    formula:
      energy = I_Acc * datavolume_Tx_CDN;
    tableVariables:
      - value: I_Acc
#      - value: P_Acc_per_sub
    importVariables:
      - value: datavolume_Tx_CDN
      - value: viewing_time
    exportVariables:
      - value: datavolume_Tx_CDN
      - value: viewing_time

    link_to:
      - Core Network

#  @todo:    calculate average bandwidth and pass up to OpenConnect CDNs
  - name: Laptop
    formula: |

      viewing_time = daily_audience * daily_viewing_time * (365.25/12);
      datavolume_Tx_CDN = viewing_time * bitrate;
      energy_decoding = viewing_time * power_decoding;
      energy = energy_decoding;
#      energy_Rx = viewing_time * power_Tx;
    tableVariables:
      - value: daily_audience
      - value: daily_viewing_time
      - value: bitrate
      - value: power_decoding
#      - value: power_Tx

    exportVariables:
      - value: datavolume_Tx_CDN
      - value: viewing_time
    link_to:
      - Access Network

Metadata:
  # about
  model_name: ICIP_2023_I
  model_version: 0.0.1
  description: simple model of whole-systems UG video content energy consumption, to compare alternative codecs
  table_file_name: short_term_model.xlsx
  start_date: 2020-03-01
  end_date: 2020-03-01

  # group-level
  with_group: false
  group_vars:
    - decoding_energy
    - encoding_energy
    - file_size

  groupings_include: groupings.yml

  # sampling
  sample_size: 1
  sample_mean: true

  #analysis
  analysis_configs:
    - name: ci
#      process_tree: { }
#      standard_plots:
#        - process_tree
  individual_process_graphs_variable: energy

Analysis:
  scenarios:
    - default
    - s720

    
  result_variables:
    - energy
#    - carbon
  numerical:
    # this generates the sheets in results_default_[] and the result_data_[] xlsx files
    - energy
#    - carbon
  units:
    - endswith: energy
      to_unit: kWh
    - __eq__: carbon
      to_unit: kg

Constants:
  # ref_duration is a month
  # days per month assumes average 365.25 days per year (allows for leap year)
  - name: days_per_month
    value: (365.25/12)
  - name: days_per_year
    value: 365.25
  - name: seconds_per_day
    value: 86400 seconds